/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import org.example.esAprobado

fun main() {
    println("=== Etapa 1: Funciones Básicas ===")
    val promedio1 = calcularPromedio(10.0, 1.0) //se llama a la función calcularPromedio y se le pasan dos parámetros que corresponden a las notas
    println("El promedio es: $promedio1") //se muestra el promedio en pantalla

    val nota = 6.6
    val aprobado = esAprobado(nota) //se llama a la función esAprobado y se le pasa un parámetro que corresponde a la nota
    println("¿Está aprobado? $aprobado") //se muestra si el alumno está aprobado o no (con true or false)

    println("\n=== Etapa 2: Funciones con Múltiples Parámetros ===")
    val promedioTresNotas = calcularPromedioTresNotas(7.0, 8.0, 9.0) //se llama a la función calcularPromedioTresNotas y se le pasan tres parámetros para los valores de las notas
    println("El promedio de las tres notas es: $promedioTresNotas") // se muestra el promedio de las tres notas en pantalla

    val estado = obtenerEstadoAlumno("Juan", "Pérez", 4.3) // se llama a la función obtenerEstadoAlumno y se le pasan tres parámetros que corresponden al nombre, apellido y nota del alumno
    println(estado) //se muestra el nombre, apellido y estado del alumno

    println("\n=== Etapa 3: Funciones con Listas ===")
    val notas = listOf(7.0, 8.0, 6.5, 9.0, 7.5) //se crea una lista de notas
    val promedioCurso = calcularPromedioCurso(notas) //se llama a la función calcularPromedioCurso y se le pasa la lista de notas como parámetro
    println("El promedio del curso es: $promedioCurso")// se muestra el promedio del curso

    val nombres = listOf("Ana", "Juan", "María", "Pedro", "Lucía") //se crea una lista de nombres y luego de notas
    val notasAlumnos = listOf(7.0, 5.0, 3.0, 6.0, 9.0)
    val aprobados = obtenerAlumnosAprobados(nombres, notasAlumnos) //se llama a la función obtenerAlumnosAprobados y se le pasan dos listas como parámetros
    println("Alumnos aprobados: $aprobados") //se muestra la lista de los nombres de los alumnos aprobados

    println("\n=== Etapa 4: Funciones Avanzadas ===")
    // TODO: Implementar función generarBoletin
    val materias = listOf("Matemática", "Lengua", "Historia")
    val notasMaterias = listOf(8.0, 7.5, 9.0)
    val boletin = generarBoletin("Juan Pérez", materias, notasMaterias)
    println(boletin)

    // TODO: Implementar funciones de análisis de rendimiento
    println("Estadísticas del curso:")
    println("Promedio: ${calcularPromedioCurso(notas)}")
    println("Nota más alta: ${obtenerNotaMasAlta(notas)}")
    println("Nota más baja: ${obtenerNotaMasBaja(notas)}")
    println("Cantidad de aprobados: ${contarAprobados(notas)}")
}

// Etapa 1
fun calcularPromedio(nota1: Double, nota2: Double): Double {
    val promedio1: Double = (nota1+nota2)/2 //se suman las dos notas y se divide por 2
    return promedio1
}

fun esAprobado(nota: Double): Boolean {
    if (nota>=6){ //se determina si la nota es mayor o igual a 6 y se devuelve un booleanoS
        return true
    } else {
        return false
    }
}

// Etapa 2
fun calcularPromedioTresNotas(nota1: Double, nota2: Double, nota3: Double): Double {
    val promedioTres: Double = (nota1 + nota2 + nota3) / 3 //se suman las tres notas y se divide por 3
    return promedioTres
}

fun obtenerEstadoAlumno(nombre: String, apellido: String, nota: Double): String {
    if (nota >= 6.0) { //se determina si la nota está aprobada (mayor o igual a 6) o desaprobada  
        return "El alumno ${nombre} ${apellido} está aprobado"
    } else{
        return "El alumno ${nombre} ${apellido} está desaprobado"
    } 
}

// Etapa 3
fun calcularPromedioCurso(notas: List<Double>): Double {
    var suma = 0.0 //se inicializa la variable suma en 0.0
    for (i in notas){ //se recorre la lista de notas
        suma = suma + i //se suman las notas
    }
    val promedioFinal = suma/notas.size // se divide la suma de las notas por la cantidad de notas
    return promedioFinal
}

fun obtenerAlumnosAprobados(nombres: List<String>, notas: List<Double>): List<String> {
    val aprobados = mutableListOf <String>() //se crea una lista mutable de strings para almacenar los nombres de los alumnos aprobados
    for (i in notas){ //se recorre la lista de notas para determinar si el alumno está aprobado o no
        if (i >= 6.0) { 
            val aprobados=aprobados.add(nombres[notas.indexOf(i)]) //se agrega el nombre del alumno a la lista de aprobados
        }
    }
    return aprobados
}

// Etapa 4
fun generarBoletin(nombre: String, materias: List<String>, notas: List<Double>): String {
    // Implementar aquí
    return ""
}

fun obtenerNotaMasAlta(notas: List<Double>): Double {
    // Implementar aquí
    return 0.0
}

fun obtenerNotaMasBaja(notas: List<Double>): Double {
    // Implementar aquí
    return 0.0
}

fun contarAprobados(notas: List<Double>): Int {
    // Implementar aquí
    return 0
}
